{
  "_args": [
    [
      {
        "raw": "vexflow",
        "scope": null,
        "escapedName": "vexflow",
        "name": "vexflow",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/chrisv/playground/hmk/it202spr2018/test"
    ]
  ],
  "_from": "vexflow@latest",
  "_id": "vexflow@1.2.84",
  "_inCache": true,
  "_location": "/vexflow",
  "_nodeVersion": "6.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/vexflow-1.2.84.tgz_1501427037642_0.40329736191779375"
  },
  "_npmUser": {
    "name": "0xfe",
    "email": "mohit@muthanna.com"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "vexflow",
    "scope": null,
    "escapedName": "vexflow",
    "name": "vexflow",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/vexflow/-/vexflow-1.2.84.tgz",
  "_shasum": "a163496b4a59074ecfe1ef373ed09aaab4aa2722",
  "_shrinkwrap": null,
  "_spec": "vexflow",
  "_where": "/home/chrisv/playground/hmk/it202spr2018/test",
  "author": {
    "name": "Mohit Muthanna Cheppudira",
    "email": "mohit@muthanna.com",
    "url": "http://muthanna.com"
  },
  "bugs": {
    "url": "https://github.com/0xfe/vexflow/issues"
  },
  "dependencies": {},
  "description": "A JavaScript library for rendering music notation and guitar tablature",
  "devDependencies": {
    "babel-core": "^6.0.0",
    "babel-loader": "^6.2.4",
    "babel-plugin-add-module-exports": "^0.2.1",
    "babel-plugin-transform-object-assign": "^6.8.0",
    "babel-preset-es2015": "^6.9.0",
    "babel-preset-es2015-loose": "^7.0.0",
    "browserify": "^13.0.1",
    "docco": "^0.7.0",
    "eslint": "^3.0.1",
    "eslint-config-airbnb-base": "^4.0.0",
    "eslint-plugin-import": "^1.9.2",
    "glob": "^7.0.5",
    "grunt": "^1.0.1",
    "grunt-bump": "0.8.0",
    "grunt-cli": "^1.2.0",
    "grunt-contrib-clean": "^1.0.0",
    "grunt-contrib-concat": "^1.0.1",
    "grunt-contrib-copy": "^1.0.0",
    "grunt-contrib-docco": "0.0.0-beta",
    "grunt-contrib-qunit": "^1.2.0",
    "grunt-contrib-uglify": "^1.0.1",
    "grunt-contrib-watch": "^1.0.0",
    "grunt-eslint": "^19.0.0",
    "grunt-git": "^1.0.0",
    "grunt-release": "^0.14.0",
    "grunt-webpack": "^1.0.11",
    "jquery": "^3.1.0",
    "jscs": "^3.0.6",
    "qunit": "^0.9.1",
    "raphael": "^2.1.0",
    "slimerjs": "^0.906.2",
    "webpack": "^1",
    "webpack-dev-server": "^1.14.1"
  },
  "directories": {},
  "dist": {
    "shasum": "a163496b4a59074ecfe1ef373ed09aaab4aa2722",
    "tarball": "https://registry.npmjs.org/vexflow/-/vexflow-1.2.84.tgz"
  },
  "gitHead": "4843cfe99d2cd0c77d486e902165efbf97fffc14",
  "homepage": "http://vexflow.com",
  "keywords": [
    "music",
    "notation",
    "guitar",
    "tablature"
  ],
  "license": "MIT",
  "main": "releases/vexflow-debug.js",
  "maintainers": [
    {
      "name": "0xfe",
      "email": "mohit@muthanna.com"
    }
  ],
  "name": "vexflow",
  "optionalDependencies": {},
  "readme": "# VexFlow 2\n\nA JavaScript library for rendering music notation.\nCopyright (c) 2010 Mohit Muthanna Cheppudira\n\n## What is VexFlow?\n\nVexFlow is an open-source web-based music notation rendering API. It is written\ncompletely in JavaScript, and runs right in the browser. VexFlow supports HTML5\nCanvas and SVG, and runs on all modern browsers.\n\nGo try out [The VexFlow Tutorial](https://github.com/0xfe/vexflow/wiki/The-VexFlow-Tutorial) to\nlearn how to use VexFlow. Also learn to use the simpler EasyScore API in the [Using EasyScore](https://github.com/0xfe/vexflow/wiki/Using-EasyScore) guide.\n\n## Quick Start\n\n### Using NPM\n\n    $ npm install vexflow\n\n### Using the HTML `script` Tag\n\nThe releases are served via [unpkg.com](http://unpkg.com).\n\n* Debug version: https://unpkg.com/vexflow/releases/vexflow-debug.js\n* Minified version: https://unpkg.com/vexflow/releases/vexflow-min.js\n\n### Your First Stave\n\nThe example code below renders a VexFlow stave using SVG. See running example in this [jsfiddle](https://jsfiddle.net/gs4v6k6d/2/).\n\n```javascript\nVF = Vex.Flow;\n\n// Create an SVG renderer and attach it to the DIV element named \"boo\".\nvar div = document.getElementById(\"boo\")\nvar renderer = new VF.Renderer(div, VF.Renderer.Backends.SVG);\n\n// Configure the rendering context.\nrenderer.resize(500, 500);\nvar context = renderer.getContext();\ncontext.setFont(\"Arial\", 10, \"\").setBackgroundFillStyle(\"#eed\");\n\n// Create a stave of width 400 at position 10, 40 on the canvas.\nvar stave = new VF.Stave(10, 40, 400);\n\n// Add a clef and time signature.\nstave.addClef(\"treble\").addTimeSignature(\"4/4\");\n\n// Connect it to the rendering context and draw!\nstave.setContext(context).draw();\n```\n\n### Using EasyScore\n\nThe EasyScore API is a quick way to create simple music notation in VexFlow. See running example in [this jsfiddle](https://jsfiddle.net/3d0nbL0n/3/).\n\n```javascript\nvar vf = new Vex.Flow.Factory({\n  renderer: {selector: 'boo', width: 500, height: 200}\n});\n\nvar score = vf.EasyScore();\nvar system = vf.System();\n\nsystem.addStave({\n  voices: [\n    score.voice(score.notes('C#5/q, B4, A4, G#4', {stem: 'up'})),\n    score.voice(score.notes('C#4/h, C#4', {stem: 'down'}))\n  ]\n}).addClef('treble').addTimeSignature('4/4');\n\nvf.draw();\n```\n\nLearn more about EasyScore at: [Using EasyScore](https://github.com/0xfe/vexflow/wiki/Using-EasyScore).\n\n## Resources\n\nTo learn and contribute, check out the [VexFlow Wiki](https://github.com/0xfe/vexflow/wiki).\n\nTo build VexFlow from scratch, read the [Build Instructions](https://github.com/0xfe/vexflow/wiki/Build-Instructions).\n\n## MIT License\n\nCopyright (c) Mohit Muthanna Cheppudira 2010 <br/>\n0xFE <mohit@muthanna.com> http://www.vexflow.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n## Links\n\n* [VexFlow Home](http://vexflow.com)\n* [My VexFlow](http://my.vexflow.com)\n* [Me](http://0xfe.muthanna.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/0xfe/vexflow.git"
  },
  "scripts": {
    "diff": "./tools/visual_regression.sh",
    "generate": "npm run generate:current && npm run generate:blessed",
    "generate:blessed": "slimerjs ./tools/generate_svg_images.js ../releases ./build/images/blessed",
    "generate:current": "slimerjs ./tools/generate_svg_images.js ../build ./build/images/current",
    "lint": "grunt eslint",
    "qunit": "grunt test",
    "start": "grunt stage",
    "test": "npm run lint && npm run qunit && npm run generate && npm run diff"
  },
  "version": "1.2.84"
}
