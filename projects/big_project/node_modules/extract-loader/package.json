{
  "_args": [
    [
      {
        "raw": "extract-loader",
        "scope": null,
        "escapedName": "extract-loader",
        "name": "extract-loader",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/chrisv/playground/hmk/it202spr2018/projects/big_project"
    ]
  ],
  "_from": "extract-loader@latest",
  "_id": "extract-loader@2.0.1",
  "_inCache": true,
  "_location": "/extract-loader",
  "_nodeVersion": "8.10.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/extract-loader_2.0.1_1521542905398_0.4288643628403379"
  },
  "_npmUser": {
    "name": "benurb",
    "email": "npm@benjaminurban.de"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "extract-loader",
    "scope": null,
    "escapedName": "extract-loader",
    "name": "extract-loader",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/extract-loader/-/extract-loader-2.0.1.tgz",
  "_shasum": "3dfa57d5922c0edbb6248490183ff8602e7cc92b",
  "_shrinkwrap": null,
  "_spec": "extract-loader",
  "_where": "/home/chrisv/playground/hmk/it202spr2018/projects/big_project",
  "author": {
    "name": "peerigon",
    "email": "developers@peerigon.com"
  },
  "bugs": {
    "url": "https://github.com/peerigon/extract-loader/issues"
  },
  "dependencies": {
    "loader-utils": "^1.1.0"
  },
  "description": "webpack loader to extract HTML and CSS from the bundle",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-plugin-istanbul": "^4.1.5",
    "babel-preset-env": "^1.6.1",
    "babel-register": "^6.26.0",
    "chai": "^4.1.0",
    "chai-fs": "^2.0.0",
    "cross-env": "^5.1.3",
    "css-loader": "^0.28.8",
    "eslint": "^4.15.0",
    "eslint-config-peerigon": "^12.0.1",
    "eslint-plugin-flowtype": "^2.41.0",
    "eslint-plugin-import": "^2.8.0",
    "eslint-plugin-jsdoc": "^3.3.1",
    "file-loader": "^1.1.6",
    "html-loader": "^0.5.0",
    "mocha": "^4.1.0",
    "nyc": "^11.4.1",
    "rimraf": "^2.6.2",
    "standard-version": "^4.3.0",
    "style-loader": "^0.19.1",
    "webpack": "^4.0.0",
    "webpack-cli": "^2.0.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-P/jwAXSgvtnzFlPCdlsQkgLHDPzOf7Syt+GpU1LkP6TwWAYm7Exfyas3kBffc8Lfq/mDah4qnY3P1uopNzhD4A==",
    "shasum": "3dfa57d5922c0edbb6248490183ff8602e7cc92b",
    "tarball": "https://registry.npmjs.org/extract-loader/-/extract-loader-2.0.1.tgz",
    "fileCount": 5,
    "unpackedSize": 17354
  },
  "engines": {
    "node": ">= 6.0.0"
  },
  "files": [
    "lib"
  ],
  "gitHead": "2f8074f4a3dd1055e3ebfaa65cc63127ed5189c3",
  "homepage": "https://github.com/peerigon/extract-loader#readme",
  "keywords": [
    "webpack",
    "loader",
    "extract",
    "html",
    "css"
  ],
  "license": "Unlicense",
  "main": "lib/extractLoader.js",
  "maintainers": [
    {
      "name": "antosan",
      "email": "sandeantony@gmail.com"
    },
    {
      "name": "benurb",
      "email": "npm@benjaminurban.de"
    },
    {
      "name": "flootr",
      "email": "markus@mpnjs.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "leomelzer",
      "email": "leonhard.melzer@peerigon.com"
    },
    {
      "name": "matthaias",
      "email": "matthias.jahn@peerigon.com"
    },
    {
      "name": "meaku",
      "email": "michael.jaser@peerigon.com"
    },
    {
      "name": "peeri",
      "email": "developers@peerigon.com"
    }
  ],
  "name": "extract-loader",
  "optionalDependencies": {},
  "readme": "extract-loader\n==============\n**webpack loader to extract HTML and CSS from the bundle.**\n\n[![](https://img.shields.io/npm/v/extract-loader.svg)](https://www.npmjs.com/package/extract-loader)\n[![](https://img.shields.io/npm/dm/extract-loader.svg)](https://www.npmjs.com/package/extract-loader)\n[![Dependency Status](https://david-dm.org/peerigon/extract-loader.svg)](https://david-dm.org/peerigon/extract-loader)\n[![Build Status](https://travis-ci.org/peerigon/extract-loader.svg?branch=master)](https://travis-ci.org/peerigon/extract-loader)\n[![Coverage Status](https://img.shields.io/coveralls/peerigon/extract-loader.svg)](https://coveralls.io/r/peerigon/extract-loader?branch=master)\n\nThe extract-loader evaluates the given source code on the fly and returns the result as string. Its main use-case is to resolve urls within HTML and CSS coming from their respective loaders. Use the [file-loader](https://github.com/webpack/file-loader) to emit the extract-loader's result as separate file.\n\n```javascript\nimport stylesheetUrl from \"file-loader!extract-loader!css-loader!main.css\";\n// stylesheetUrl will now be the hashed url to the final stylesheet\n```\n\nThe extract-loader works similar to the [extract-text-webpack-plugin](https://github.com/webpack/extract-text-webpack-plugin) and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the [html-](https://github.com/webpack/html-loader) or the [css-loader](https://github.com/webpack/css-loader). Thus it might not work in other situations.\n\n<br>\n\nInstallation\n------------------------------------------------------------------------\n\n`npm install extract-loader`\n\n<br>\n\nExamples\n------------------------------------------------------------------------\n\n### [Extracting a main.css](https://github.com/peerigon/extract-loader/tree/master/examples/main-css)\n\nBundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or [hot module replacement](http://webpack.github.io/docs/hot-module-replacement-with-webpack.html) in development. In production, on the other hand, it's not a good idea to apply your stylesheets depending on JS execution. Rendering may be delayed or even a [FOUC](https://en.wikipedia.org/wiki/Flash_of_unstyled_content) might be visible. Thus it's still better to have them as separate files in your final production build.\n\nWith the extract-loader, you are able to reference your `main.css` as regular `entry`. The following `webpack.config.js` shows how to load your styles with the [style-loader](https://github.com/webpack/style-loader) in development and as separate file in production.\n\n```javascript\nconst live = process.env.NODE_ENV === \"production\";\nconst mainCss = [\"css-loader\", path.join(__dirname, \"app\", \"main.css\")];\n\nif (live) {\n    mainCss.unshift(\"file-loader?name=[name].[ext]\", \"extract-loader\");\n} else {\n    mainCss.unshift(\"style-loader\");\n}\n\nmodule.exports = {\n    entry: [\n        path.join(__dirname, \"app\", \"main.js\"),\n        mainCss.join(\"!\")\n    ],\n    ...\n};\n```\n\n### [Extracting the index.html](https://github.com/peerigon/extract-loader/tree/master/examples/index-html)\n\nYou can even add your `index.html` as `entry` and just reference your stylesheets from there. You just need to tell the html-loader to also pick up `link:href`:\n\n```javascript\nconst indexHtml = path.join(__dirname, \"app\", \"index.html\");\n\nmodule.exports = {\n    entry: [\n        path.join(__dirname, \"app\", \"main.js\"),\n        indexHtml\n    ],\n    ...\n    module: {\n        rules: [\n            {\n                test: indexHtml,\n                use: [\n                    {\n                        loader: \"file-loader\",\n                        options: {\n                            name: \"[name]-dist.[ext]\",\n                        },\n                    },\n                    {\n                        loader: \"extract-loader\",\n                    },\n                    {\n                        loader: \"html-loader\",\n                        options: {\n                            attrs: [\"img:src\", \"link:href\"],\n                            interpolate: true,\n                        },\n                    },\n                ],\n            },\n            {\n                test: /\\.css$/,\n                loaders: [\n                    {\n                        loader: \"file-loader\",\n                    },\n                    {\n                        loader: \"extract-loader\",\n                    },\n                    {\n                        loader: \"css-loader\",\n                    },\n                ],\n            },\n            {\n                test: /\\.jpg$/,\n                loaders: [\n                    {\n                        loader: \"file-loader\"\n                    },\n                ],\n            },\n        ]\n    }\n};\n```\n\nturns\n\n```html\n<html>\n<head>\n    <link href=\"main.css\" type=\"text/css\" rel=\"stylesheet\">\n</head>\n<body>\n    <img src=\"hi.jpg\">\n</body>\n</html>\n```\n\ninto\n\n\n```html\n<html>\n<head>\n    <link href=\"7c57758b88216530ef48069c2a4c685a.css\" type=\"text/css\" rel=\"stylesheet\">\n</head>\n<body>\n    <img src=\"6ac05174ae9b62257ff3aa8be43cf828.jpg\">\n</body>\n</html>\n```\n\n<br>\n\nOptions\n------------------------------------------------------------------------\n\nThere is currently exactly one option: `publicPath`.\nIf you are using a relative `publicPath` in webpack's [output options](http://webpack.github.io/docs/configuration.html#output-publicpath) and extracting to a file with the `file-loader`, you might need this to account for the location of your extracted file.\n\nExample:\n\n```js\nmodule.exports = {\n    output: {\n        path: path.resolve(\"./dist\"),\n        publicPath: \"dist/\"\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.css$/,\n                use: [\n                    {\n                        loader: \"file-loader\",\n                        options: {\n                            name: \"assets/[name].[ext]\",\n                        },\n                    },\n                    {\n                        loader: \"extract-loader\",\n                        options: {\n                            publicPath: \"../\",\n                        }\n                    },\n                    {\n                        loader: \"css-loader\",\n                    },\n                ],\n            }\n        ]\n    }\n};\n```\n\nYou need another option? Then you should think about:\n\n<br>\n\nContributing\n------------------------------------------------------------------------\n\nFrom opening a bug report to creating a pull request: **every contribution is appreciated and welcome**. If you're planing to implement a new feature or change the api please create an issue first. This way we can ensure that your precious work is not in vain.\n\nAll pull requests should have 100% test coverage (with notable exceptions) and need to pass all tests.\n\n- Call `npm test` to run the unit tests\n- Call `npm run coverage` to check the test coverage (using [istanbul](https://github.com/gotwarlost/istanbul))\n\n<br>\n\nLicense\n------------------------------------------------------------------------\n\nUnlicense\n\nSponsors\n------------------------------------------------------------------------\n\n[<img src=\"https://assets.peerigon.com/peerigon/logo/peerigon-logo-flat-spinat.png\" width=\"150\" />](https://peerigon.com)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/peerigon/extract-loader.git"
  },
  "scripts": {
    "build": "babel src -d lib",
    "posttest": "eslint src test",
    "prepublishOnly": "npm test",
    "release": "standard-version",
    "test": "cross-env NODE_ENV=test nyc mocha -R spec"
  },
  "version": "2.0.1"
}
